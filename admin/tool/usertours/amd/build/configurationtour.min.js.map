{"version":3,"file":"configurationtour.min.js","sources":["../src/configurationtour.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * User tours configuration.\n *\n * @module      tool_usertours/configurationtour\n * @copyright   2024 The Open University\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst ANY_VALUE = \"__ANYVALUE__\";\n\nexport const init = () => {\n    // Initialize the category filter\n    initConfigurationCategoryFilter();\n};\n\n/**\n * Initialize the category filter for the configuration page.\n */\nconst initConfigurationCategoryFilter = () => {\n    const categorySelect = document.querySelector(\"[name='filter_category[]']\");\n    const excludeSelect = document.querySelector(\"[name='filter_exclude_category[]']\");\n\n    if (categorySelect && excludeSelect) {\n        // Add event listeners to update the exclude categories when the include categories change.\n        categorySelect.addEventListener(\"change\", () => {\n            updateCategorySelectionOptions(categorySelect);\n            updateExcludeCategories(categorySelect, excludeSelect);\n        });\n\n        excludeSelect.addEventListener(\"change\", () => {\n            updateCategorySelectionOptions(excludeSelect);\n        });\n\n        // Initialize the exclude categories based on the selected include categories.\n        updateExcludeCategories(categorySelect, excludeSelect);\n        updateCategorySelectionOptions(categorySelect);\n        updateCategorySelectionOptions(excludeSelect);\n    }\n};\n\n/**\n * Adjust the height of a select element based on the number of options.\n *\n * @param {HTMLSelectElement} select\n */\nconst adjustHeight = (select) => {\n    select.size = Math.min(select.options.length || 1, 10);\n};\n\n/**\n * Update the selection of the 'Any' option based on the selected categories.\n *\n * @param {HTMLSelectElement} categorySelect\n * @param {Set<string>} selectedCategories\n * @returns {boolean} Whether the 'Any' option is selected\n */\nconst updateAnyOptionSelection = (categorySelect, selectedCategories) => {\n    const anyOption = categorySelect.querySelector(`option[value=\"${ANY_VALUE}\"]`);\n    const isAnySelected = selectedCategories.size === 0 || (selectedCategories.size === 1 && selectedCategories.has(ANY_VALUE));\n\n    anyOption.selected = isAnySelected;\n    anyOption.disabled = !isAnySelected;\n\n    if (isAnySelected) {\n        selectedCategories.add(ANY_VALUE);\n    }\n\n    return isAnySelected;\n};\n\n/**\n * Update the exclude categories based on the selected include categories.\n *\n * @param {HTMLSelectElement} categorySelect\n * @param {HTMLSelectElement} excludeSelect\n */\nconst updateExcludeCategories = (categorySelect, excludeSelect) => {\n    // Get the selected categories and update the 'Any' option.\n    const selectedCategories = new Set(Array.from(categorySelect.selectedOptions).map(option => option.value));\n    const isAnySelected = updateAnyOptionSelection(categorySelect, selectedCategories);\n\n    // Get the selected exclude categories and create a map of options.\n    const excludeSelected = new Set(Array.from(excludeSelect.selectedOptions).map(option => option.value));\n    const excludeOptions = new Map();\n\n    Array.from(categorySelect.options)\n        .filter(option => option.value !== ANY_VALUE)\n        .forEach(option => {\n            if (isAnySelected) {\n                // If 'Any' is selected, include all options except the selected ones.\n                if (!selectedCategories.has(option.value)) {\n                    excludeOptions.set(option.value, option.text);\n                }\n            } else {\n                // Check if the option is a child of any selected category.\n                const isChild = Array.from(selectedCategories).some(selected => {\n                    const selectedOption = categorySelect.querySelector(`option[value=\"${selected}\"]`);\n                    return option.text.startsWith(selectedOption.text + \" / \");\n                });\n\n                // Include the option if it's a child of a selected category.\n                if (isChild) {\n                    excludeOptions.set(option.value, option.text);\n                }\n            }\n        });\n\n    // Update the exclude categories select element.\n    excludeSelect.innerHTML = Array.from(excludeOptions)\n        .sort(([, a], [, b]) => a.localeCompare(b))\n        .map(([key, value]) =>\n            `<option value=\"${key}\" ${excludeSelected.has(key) ? 'selected' : ''}>${value}</option>`\n        ).join('');\n\n    // Adjust the height of the select elements.\n    adjustHeight(excludeSelect);\n};\n\n/**\n * Update the options of the category select element based on the selected categories.\n *\n * @param {HTMLSelectElement} categorySelect\n */\nconst updateCategorySelectionOptions = (categorySelect) => {\n    const selectedCategories = new Set(Array.from(categorySelect.selectedOptions).map(option => option.value));\n    const categoryOptions = Array.from(categorySelect.options);\n\n    categoryOptions.forEach(option => {\n        // Skip the 'Any' option.\n        if (option.value === ANY_VALUE) {\n            return;\n        }\n\n        // Enable the option if it's selected.\n        if (selectedCategories.has(option.value)) {\n            option.disabled = false;\n            return;\n        }\n\n        const currentPath = option.text.split(' / ');\n        // Disable the option if it's a parent or child of a selected category.\n        option.disabled = Array.from(selectedCategories).some(selectedValue => {\n            if (selectedValue === ANY_VALUE) {\n                return false;\n            }\n            const selectedOption = categoryOptions.find(opt => opt.value === selectedValue);\n            const selectedPath = selectedOption.text.split(' / ');\n            return isParentOrChildPath(currentPath, selectedPath);\n        });\n    });\n};\n\n/**\n * Check if one path is a parent or child of another path.\n *\n * @param {string[]} path1 The first path.\n * @param {string[]} path2 The second path.\n * @returns {boolean} Whether one path is a parent or child of the other.\n */\nconst isParentOrChildPath = (path1, path2) => {\n    const minLength = Math.min(path1.length, path2.length);\n    for (let i = 0; i < minLength; i++) {\n        if (path1[i] !== path2[i]) {\n            return false;\n        }\n    }\n    return true;\n};"],"names":["ANY_VALUE","initConfigurationCategoryFilter","categorySelect","document","querySelector","excludeSelect","addEventListener","updateCategorySelectionOptions","updateExcludeCategories","selectedCategories","Set","Array","from","selectedOptions","map","option","value","isAnySelected","anyOption","size","has","selected","disabled","add","updateAnyOptionSelection","excludeSelected","excludeOptions","Map","select","options","filter","forEach","set","text","some","selectedOption","startsWith","innerHTML","sort","a","b","localeCompare","_ref3","key","join","Math","min","length","categoryOptions","currentPath","split","selectedValue","selectedPath","find","opt","isParentOrChildPath","path1","path2","minLength","i"],"mappings":";;;;;;;;MAsBMA,UAAY,6BAEE,KAEhBC,yCAMEA,gCAAkC,WAC9BC,eAAiBC,SAASC,cAAc,8BACxCC,cAAgBF,SAASC,cAAc,sCAEzCF,gBAAkBG,gBAElBH,eAAeI,iBAAiB,UAAU,KACtCC,+BAA+BL,gBAC/BM,wBAAwBN,eAAgBG,kBAG5CA,cAAcC,iBAAiB,UAAU,KACrCC,+BAA+BF,kBAInCG,wBAAwBN,eAAgBG,eACxCE,+BAA+BL,gBAC/BK,+BAA+BF,iBAwCjCG,wBAA0B,CAACN,eAAgBG,uBAEvCI,mBAAqB,IAAIC,IAAIC,MAAMC,KAAKV,eAAeW,iBAAiBC,KAAIC,QAAUA,OAAOC,SAC7FC,cAvBuB,EAACf,eAAgBO,4BACxCS,UAAYhB,eAAeE,sCAA+BJ,iBAC1DiB,cAA4C,IAA5BR,mBAAmBU,MAA2C,IAA5BV,mBAAmBU,MAAcV,mBAAmBW,IAAIpB,kBAEhHkB,UAAUG,SAAWJ,cACrBC,UAAUI,UAAYL,cAElBA,eACAR,mBAAmBc,IAAIvB,WAGpBiB,eAYeO,CAAyBtB,eAAgBO,oBAGzDgB,gBAAkB,IAAIf,IAAIC,MAAMC,KAAKP,cAAcQ,iBAAiBC,KAAIC,QAAUA,OAAOC,SACzFU,eAAiB,IAAIC,IAtCTC,IAAAA,OAwClBjB,MAAMC,KAAKV,eAAe2B,SACrBC,QAAOf,QAAUA,OAAOC,QAAUhB,YAClC+B,SAAQhB,YACDE,cAEKR,mBAAmBW,IAAIL,OAAOC,QAC/BU,eAAeM,IAAIjB,OAAOC,MAAOD,OAAOkB,UAEzC,CAEatB,MAAMC,KAAKH,oBAAoByB,MAAKb,iBAC1Cc,eAAiBjC,eAAeE,sCAA+BiB,uBAC9DN,OAAOkB,KAAKG,WAAWD,eAAeF,KAAO,WAKpDP,eAAeM,IAAIjB,OAAOC,MAAOD,OAAOkB,UAMxD5B,cAAcgC,UAAY1B,MAAMC,KAAKc,gBAChCY,MAAK,oBAAIC,UAAOC,gBAAOD,EAAEE,cAAcD,MACvC1B,KAAI4B,YAAEC,IAAK3B,4CACU2B,iBAAQlB,gBAAgBL,IAAIuB,KAAO,WAAa,eAAM3B,sBAC1E4B,KAAK,KAnEOhB,OAsELvB,eArENc,KAAO0B,KAAKC,IAAIlB,OAAOC,QAAQkB,QAAU,EAAG,KA6EjDxC,+BAAkCL,uBAC9BO,mBAAqB,IAAIC,IAAIC,MAAMC,KAAKV,eAAeW,iBAAiBC,KAAIC,QAAUA,OAAOC,SAC7FgC,gBAAkBrC,MAAMC,KAAKV,eAAe2B,SAElDmB,gBAAgBjB,SAAQhB,YAEhBA,OAAOC,QAAUhB,oBAKjBS,mBAAmBW,IAAIL,OAAOC,mBAC9BD,OAAOO,UAAW,SAIhB2B,YAAclC,OAAOkB,KAAKiB,MAAM,OAEtCnC,OAAOO,SAAWX,MAAMC,KAAKH,oBAAoByB,MAAKiB,mBAC9CA,gBAAkBnD,iBACX,QAGLoD,aADiBJ,gBAAgBK,MAAKC,KAAOA,IAAItC,QAAUmC,gBAC7BlB,KAAKiB,MAAM,cACxCK,oBAAoBN,YAAaG,qBAY9CG,oBAAsB,CAACC,MAAOC,eAC1BC,UAAYb,KAAKC,IAAIU,MAAMT,OAAQU,MAAMV,YAC1C,IAAIY,EAAI,EAAGA,EAAID,UAAWC,OACvBH,MAAMG,KAAOF,MAAME,UACZ,SAGR"}